256 32-bit registers - R0..R255
4GB memory (RAM), 4GB persistent storage (blocks of 4KB?)
instructions include operand size - 8, 16, 32 bit (b, w, or nothing, appended at the end of the mnemonic)
operand addressing is 
	short-immediate
		specified as:	number, e.g. 5
		operand is a number, part of instruction (1 byte)
	immediate
		specified as:	number, e.g. 5
		operand is a number, part of instruction (4 bytes)
	register (direct)
		specified as:	register name e.g. R15 or R[15]
		operand is a register, its index is specified in the instruction code
	register indirect
		specified as:	R[register name], e.g. R[R15]
		operand is a register, whose index is in the lower byte of the specified register, whose index is specified in the instruction code
	register indirect + displacement, e.g. R[R15 + 5]
		specified as:	R[register name + number]
		operand is a register, whose index is calculated by adding the lower byte of the specified register and a number; the index of the register and the number are specified in the instruction code
	direct
		specified as:	[address], e.g. [420000]
		operand is a memory cell, its address is specified in the instruction code
	indirect
		specified as:	[register name], e.g. [R15]
		operand is a memory cell, its address is found in a register, whose index is specified in the instruction code
	indirect + displacement
		specified as:	[register name + number], e.g. [R15 + 420000] or [420000 + R15]
		operand is a memory cell, its address is calculated by adding contents of a register and a number; the register index and the number are specified in the instruction code
	relative
		specified as:	label
		used only for jump/call instructions; operand is added to IP to obtain the new value

for single-operand instructions - all kinds of operand addressing are available
for two-operand instruction - the destination operand must be register
stack cell size is 32 bit, stack grows from the bottom to top of memory
no interrupts or exceptions for now, execution begins at address 0

Instruction set:

Used symbols:
R - register or register indirect addressing
Rw - register or register indirect addressing, lower word of the register
Rb - register or register indirect addressing, lower byte of the register
Rn:Rn+1 - registers with indices n and n+1 are concatenated to form a single 64 bit register.
K(8) - immediate/relative addressing (8 bits)
A - any type of addressing
SR - System register (IP, SP, Flags etc.)
C - carry flag
N - negative flag
Z - zero flag
O - overflow flag
SP - stack pointer
IP - instruction pointer
FLAGS - flags register (containing Z, C, N, O)
isz - instruction size

Arithmetic:
opcode	Mn	oper	operation		flags
01	add	R, A	R <- R + A		ZCNO
02	adc	R, A	R <- R + A + C		ZCNO
03	sub	R, A	R <- R - A		ZCNO
04	sbb	R, A	R <- R - A - C		ZCNO
05	cmp	R, A	R - A			ZCNO
06	cpc	R, A	R - A - C		?
07	and	R, A	R <- R & A		ZCNO
08	or	R, A	R <- R | A		ZCNO
09	xor	R, A	R <- R ^ A		ZCNO
0A	not	A	A <- ~A			-
0B	neg	A	A <- -A			ZCNO
0C	inc	A	A <- A + 1		ZNO
0D	dec	A	A <- A - 1		ZNO
0E	test	R, A	R & A			ZCNO
0F	clr	A	A <- 0			-

n/a for now 10?	mul	R, A	Rn:Rn+1 <- R * A	?
n/a for now 10?	mulw	Rw, A	R <- Rw * A		?
n/a for now 10?	mulb	Rb, A	Rw <- Rb * A		?
n/a for now 11?	div?

Flow control:
80	jmp	K	IP <- IP + K(8) + isz	-
81	jmp	A	IP <- A			-
82	call	K	STACK <- IP + isz	-
			IP <- IP + K(8) + isz
83	call	A	STACK <- IP + isz	-
			IP <- A
84	ret		IP <- STACK		-
88	jz	K	if (Z) IP <- IP + K(8)  -
89	jnz	K	if (!Z) IP <- IP + K(8) -
8A	jc	K	if (C) IP <- IP + K(8)  -
8B	jnc	K	if (!C) IP <- IP + K(8) -
8C	jn	K	if (N) IP <- IP + K(8)  -
8D	jp	K	if (!N) IP <- IP + K(8) -
8E	jge	K	if (O=C) IP <- IP + K(8)  -
8F	jl	K	if (O!=C) IP <- IP + K(8) -
90	nop		-			-
-00	break		breaks			-
-CC	break		breaks			-
AA	halt		stops the VM

Data transfer:
A0	mov	R, A	R <- A			-
A0	mov	A, R	A <- R			-
A1	mov	Reg, SR	Reg <- SR		-
A2	mov	SR, Reg	SR <- Reg		-
A3	in	R, A	R(32) <- Bus[A(32)]	-
A4	out	A, R	Bus[A(32)] <- R(32)	-
A5	push	A	STACK <- A		-
A6	pop	A	A <- STACK		-
-A7	pushf		STACK <- FLAGS		-
-A8	popf		FLAGS <- STACK 		*

Bitwise:
B0	shl	A, K	A <- A << K(8)		ZCNO
B1	shr	A, K	A <- A >> K(8)		ZCNO
B2	sar	A, K	A <- A >>> K(8)		ZCNO
B3	rol	A, K	A <- A << 1 | A >> 7	CO
B4	ror	A, K	A <- A >> 1 | A << 7	CO
B5	rcl	A, K	A <- A << 1 | C		CO
B6	rcr	A, K	A <- A >> 1 | C << 7	CO
B7	clz		Z <- 0			Z
B8	stz		Z <- 1			Z
B9	clc		C <- 0			C
BA	stc		C <- 1			C
BB	cln		N <- 0			N
BC	stn		N <- 1			N
BD	clo		O <- 0			O
BE	sto		O <- 1			O

Instruction Opcodes (bits):
cccc cccc ssdl rrrr *operands*

c - opcode
s - operand size (missing for no-operand instructions)
d - direction (0 = right to left; 1 = left to right, missing for no-operand instructions)
r - addressing mode (for right in 1- or 2-operand instructions, missing for no-operand instructions)
l - addressing mode (for left in 2-operand instructions, missing for no-operand instructions)

Size values:
ss
00	32 bit
01	16 bit
10	8 bit

Addressing mode values and operands:
ss	rrrr	addressing mode				operand bytes
00	0000	immediate				KKKK
01	0000	immediate				KK
10	0000	immediate				K
xx	0001	register (direct)			R
xx	0010	register indirect			R
xx	0011	register indirect + displacement	RK
xx	0100	direct					KKKK
xx	0101	indirect				R
xx	0110	indirect + displacement			RKKKK
xx	1000	short-immediate				K
xx	1110	indirect + short-displacement		RK

Destination operand addressing:
l
0 - register
1 - register indirect


