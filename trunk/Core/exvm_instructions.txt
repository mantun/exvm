; --- General -----------------------------------------------------------------

general_prolog name
// --------------------------------------------------
procedure {name};
asm

general_epilog
end;

ropsize 'Rel opsize
  1

ropsize 'Imm '8
  1

ropsize 'Imm '16
  2

ropsize 'Imm '32
  4

ropsize 'Reg opsize
  1

ropsize 'RegInd opsize
  1

ropsize 'RegIndDispl opsize
  2

ropsize 'Direct opsize
  4

ropsize 'Indirect opsize
  1

ropsize 'IndirectDispl opsize
  5

ropsize 'ShortImm opsize
  1

ropsize 'IndirectShortDispl opsize
  2

; --- Arithmetic Instructions -------------------------------------------------

calcRightOpAddr '1Op addrR opsize
  lea esi, [ebx + SingleOpDispl]

calcRightOpAddr '2Op addrR opsize
  lea esi, [ebx + SourceOpDispl]

calcRA 'Imm write opsize

calcRA 'Reg write opsize
  xor eax, eax
  mov al, [esi]
  lea esi, [eax * 4 + RegistersFile]

calcRA 'RegInd write opsize
  xor eax, eax
  mov al, [esi]
  mov al, [eax * 4 + RegistersFile]
  lea esi, [eax * 4 + RegistersFile]

calcRA 'RegIndDispl write opsize
  xor eax, eax
  mov al, [esi]
  mov al, [eax * 4 + RegistersFile]
  add al, [esi + 1]
  lea esi, [eax * 4 + RegistersFile]

calcRA 'Direct write opsize
  mov eax, [esi]
  mov edx, {ropsize|Imm|{opsize}}
  call GetCellAddr{write}
  mov esi, eax

calcRA 'Indirect write opsize
  xor eax, eax
  mov al, [esi]
  mov eax, [eax * 4 + RegistersFile]
  mov edx, {ropsize|Imm|{opsize}}
  call GetCellAddr{write}
  mov esi, eax

calcRA 'IndirectDispl write opsize
  xor eax, eax
  mov al, [esi]
  mov eax, [eax * 4 + RegistersFile]
  mov esi, [esi + 1]
  add eax, esi
  mov edx, {ropsize|Imm|{opsize}}
  call GetCellAddr{write}
  mov esi, eax

calcRA 'ShortImm write opsize

calcRA 'IndirectShortDispl write opsize
  xor eax, eax
  mov al, [esi]
  mov eax, [eax * 4 + RegistersFile]
  movsx esi, byte ptr [esi + 1]
  add eax, esi
  mov edx, {ropsize|Imm|{opsize}}
  call GetCellAddr{write}
  mov esi, eax

calcLA 'Reg
  lea edi, [ebx + DestOpDispl]
  xor eax, eax
  mov al, [edi]
  lea edi, [eax * 4 + RegistersFile]

calcLA 'RegInd
  lea edi, [ebx + DestOpDispl]
  xor eax, eax
  mov al, [edi]
  mov al, [eax * 4 + RegistersFile]
  lea edi, [eax * 4 + RegistersFile]

fetchR addrR '32
  mov eax, [esi]

fetchR addrR '16
  mov ax, [esi]

fetchR addrR '8
  mov al, [esi]

fetchR 'ShortImm '32
  movsx eax, byte ptr [esi]

fetchR 'ShortImm '16
  movsx ax, byte ptr [esi]

fetchR 'ShortImm '8
  mov {reg_A|8}, [esi]

fetchR addrR size
  mov {reg_A|{size}}, [esi]

arith_set_flags_ZNO
  pushfd
  pop eax
  and eax, _ZF or _NF or _OF
  and _Flags, not _ZF or _NF or _OF
  or _Flags, eax

arith_set_flags 'not

arith_set_flags 'clr

arith_set_flags 'dec
{arith_set_flags_ZNO}

arith_set_flags 'inc
{arith_set_flags_ZNO}

arith_set_flags 'mov

arith_set_flags 'in

arith_set_flags 'out

arith_set_flags operation
  pushfd
  pop _Flags

arith_prepare_flags_C
  clc
  test _Flags, _CF
  jz @@noC
  stc
@@noC:

arith_prepare_flags 'sbb
{arith_prepare_flags_C}

arith_prepare_flags 'cpc
{arith_prepare_flags_C}

arith_prepare_flags operation

reg_A '32
eax

reg_A '16
ax

reg_A '8
al

ptr_mod '32

ptr_mod '16
word ptr

ptr_mod '8
byte ptr

perform_arith_2op addrR size 'left 'out
  mov eax, [edi]
  mov edx, [esi]
  call Bus.Write

perform_arith_2op addrR size 'right 'out
  mov eax, [esi]
  mov edx, [edi]
  call Bus.Write

perform_arith_2op addrR size 'left 'in
  mov eax, [esi]
  call Bus.Read
  mov [edi], eax

perform_arith_2op addrR size 'right 'in
  mov eax, [edi]
  call Bus.Read
  mov [esi], eax

perform_arith_2op addrR size 'left 'cpc
  mov {reg_A|{size}}, [edi]
  sbb {reg_A|{size}}, [esi]

perform_arith_2op addrR size 'right 'cpc
  {fetchR|{addrR}|{size}}
  sbb {reg_A|{size}}, [edi]

perform_arith_2op addrR size 'left operation
  {fetchR|{addrR}|{size}}
  {operation} [edi], {reg_A|{size}}

perform_arith_2op addrR size 'right operation
  mov {reg_A|{size}}, [edi]
  {operation} [esi], {reg_A|{size}}

perform_arith_1op size operation
  {operation} {ptr_mod|{size}} [esi]

perform_arith_1op size 'clr
  mov {ptr_mod|{size}} [esi], 0

advanceIP_1op addrR opsize
  add _IP, 2+{ropsize|{addrR}|{opsize}}

advanceIP_2op addrR addrL opsize
  add _IP, 3+{ropsize|{addrR}|{opsize}}

isWrite operation 'left

isWrite operation 'right
Write

isWrite 'cmp 'right

isWrite 'cpc 'right

isWrite 'test 'right

commit_write addrR isWrite

commit_write 'Direct 'Write
  call CommitCellWrite

commit_write 'Indirect 'Write
  call CommitCellWrite

commit_write 'IndirectDispl 'Write
  call CommitCellWrite

commit_write 'IndirectShortDispl 'Write
  call CommitCellWrite

arith_instruction_2op operation addrR addrL direction size 'def
{general_prolog|{operation}_{addrL}_{addrR}_{direction}_{size}}
  {calcRightOpAddr|2Op|{addrR}|{size}}
  {calcRA|{addrR}|{isWrite|{operation}|{direction}}|{size}}
  {calcLA|{addrL}}
  {arith_prepare_flags|{operation}}
  {perform_arith_2op|{addrR}|{size}|{direction}|{operation}}
  {arith_set_flags|{operation}}
  {commit_write|{addrR}|{isWrite|{operation}|{direction}}}
  {advanceIP_2op|{addrR}|{addrL}|{size}}
{general_epilog}

arith_instruction_1op operation addrR size 'def
{general_prolog|{operation}_{addrR}_{size}}
  {calcRightOpAddr|1Op|{addrR}|{size}}
  {calcRA|{addrR}|Write|{size}}
  {arith_prepare_flags|{operation}}
  {perform_arith_1op|{size}|{operation}}
  {arith_set_flags|{operation}}
  {commit_write|{addrR}|{isWrite|{operation}|right}}
  {advanceIP_1op|{addrR}|{size}}
{general_epilog}

arith operation '1op opcode
{expand_arith_addrR|{operation}||1op|{opcode}}

arith operation '2op opcode
{expand_arith_addrR|{operation}|left|2op|{opcode}}
{expand_arith_addrR|{operation}|right|2op|{opcode}}

expand_arith_addrR operation 'left '2op opcode
{expand_arith_size|{operation}|Imm|left|2op|{opcode}}
{expand_arith_size|{operation}|Reg|left|2op|{opcode}}
{expand_arith_size|{operation}|RegInd|left|2op|{opcode}}
{expand_arith_size|{operation}|RegIndDispl|left|2op|{opcode}}
{expand_arith_size|{operation}|Direct|left|2op|{opcode}}
{expand_arith_size|{operation}|Indirect|left|2op|{opcode}}
{expand_arith_size|{operation}|IndirectDispl|left|2op|{opcode}}
{expand_arith_size|{operation}|ShortImm|left|2op|{opcode}}
{expand_arith_size|{operation}|IndirectShortDispl|left|2op|{opcode}}

expand_arith_addrR operation 'right '2op opcode
{expand_arith_size|{operation}|Reg|right|2op|{opcode}}
{expand_arith_size|{operation}|RegInd|right|2op|{opcode}}
{expand_arith_size|{operation}|RegIndDispl|right|2op|{opcode}}
{expand_arith_size|{operation}|Direct|right|2op|{opcode}}
{expand_arith_size|{operation}|Indirect|right|2op|{opcode}}
{expand_arith_size|{operation}|IndirectDispl|right|2op|{opcode}}
{expand_arith_size|{operation}|IndirectShortDispl|right|2op|{opcode}}

expand_arith_addrR operation direction '1op opcode
{expand_arith_size|{operation}|Reg||1op|{opcode}}
{expand_arith_size|{operation}|RegInd||1op|{opcode}}
{expand_arith_size|{operation}|RegIndDispl||1op|{opcode}}
{expand_arith_size|{operation}|Direct||1op|{opcode}}
{expand_arith_size|{operation}|Indirect||1op|{opcode}}
{expand_arith_size|{operation}|IndirectDispl||1op|{opcode}}
{expand_arith_size|{operation}|IndirectShortDispl||1op|{opcode}}

expand_arith_size 'in addrR direction opcount opcode
{expand_arith|{opcount}|in|{addrR}|{direction}|32|{opcode}}

expand_arith_size 'out addrR direction opcount opcode
{expand_arith|{opcount}|out|{addrR}|{direction}|32|{opcode}}

expand_arith_size operation addrR direction opcount opcode
{expand_arith|{opcount}|{operation}|{addrR}|{direction}|32|{opcode}}
{expand_arith|{opcount}|{operation}|{addrR}|{direction}|16|{opcode}}
{expand_arith|{opcount}|{operation}|{addrR}|{direction}|8|{opcode}}

expand_arith '1op operation addrR direction size opcode
{arith_instruction_1op|{operation}|{addrR}|{size}|{opcode}}

expand_arith '2op operation addrR direction size opcode
{arith_instruction_2op|{operation}|{addrR}|Reg|{direction}|{size}|{opcode}}
{arith_instruction_2op|{operation}|{addrR}|RegInd|{direction}|{size}|{opcode}}

; --- Flow Control Instructions -----------------------------------------------

branch_to_target 'Rel
  mov esi, _IP
  mov eax, esi
  inc eax
  mov edx, 1
  call GetCellAddr
  movsx eax, byte ptr [eax]
  add esi, eax
  mov _IP, esi

branch_to_target addrR
  {calcRightOpAddr|1Op|{addrR}|32}
  {calcRA|{addrR}||32}
  {fetchR|{addrR}|32}
  mov _IP, eax

branch_code_size addrR
  2

branch_code_size 'Rel
  1

check_cond 'jge ' '-
  push _Flags
  popfd
  jl @@dont_branch

check_cond 'jl ' '-
  push _Flags
  popfd
  jge @@dont_branch

check_cond operation flag neg
  test _Flags, {flag}
  j{neg}z @@dont_branch

check_cond operation '- neg

branch_instr_size addrR
{branch_code_size|{addrR}}+{ropsize|{addrR}|32}

store_ret_addr operation addrR

store_ret_addr 'call addrR
  mov eax, _IP
  add eax, {branch_instr_size|{addrR}}
  {do_push}

advanceIP_branch '- addrR

advanceIP_branch flag addrR
@@dont_branch:
  add _IP, {branch_instr_size|{addrR}}

branch_instruction_rel operation flag neg 'def
{branch_instruction|{operation}|Rel|{flag}|{neg}|def}

branch_instruction_abs operation addrR flag neg 'def
{branch_instruction|{operation}|{addrR}|{flag}|{neg}|def}

branch_instruction operation addrR flag neg 'def
{general_prolog|{operation}_{addrR}}
  {check_cond|{operation}|{flag}|{neg}}
  {store_ret_addr|{operation}|{addrR}}
  {branch_to_target|{addrR}}
  ret
  {advanceIP_branch|{flag}|{addrR}}
{general_epilog}

branch_rel oper 'def
{branch_instruction_rel|{oper}|-||def}

branch_abs oper opcode
{branch_instruction_abs|{oper}|Imm|-||{opcode}}
{branch_instruction_abs|{oper}|Reg|-||{opcode}}
{branch_instruction_abs|{oper}|RegInd|-||{opcode}}
{branch_instruction_abs|{oper}|RegIndDispl|-||{opcode}}
{branch_instruction_abs|{oper}|Direct|-||{opcode}}
{branch_instruction_abs|{oper}|Indirect|-||{opcode}}
{branch_instruction_abs|{oper}|IndirectDispl|-||{opcode}}
{branch_instruction_abs|{oper}|IndirectShortDispl|-||{opcode}}

branch_cond oper flag neg opcode
{branch_instruction_rel|{oper}|{flag}|{neg}|{opcode}}

ret_instruction
{general_prolog|ret}
  {do_pop}
  mov _IP, ebx
{general_epilog}

nop_instruction
{general_prolog|nop}
  inc _IP
{general_epilog}

; --- Stack -------------------------------------------------------------------

do_push
  mov ebx, eax
  sub _SP, 4
  mov eax, _SP
  mov edx, 4
  call GetCellAddrWrite
  mov [eax], ebx
  call CommitCellWrite

do_pop
  mov eax, _SP
  mov edx, 4
  call GetCellAddr
  mov ebx, [eax]
  add _SP, 4

push_instruction addrR 'def
{general_prolog|push_{addrR}}
  {calcRightOpAddr|1Op|{addrR}|32}
  {calcRA|{addrR}||32}
  {fetchR|{addrR}|32}
  {do_push}
  {advanceIP_1op|{addrR}|32}
{general_epilog}

pop_instruction addrR 'def
{general_prolog|pop_{addrR}}
  {calcRightOpAddr|1Op|{addrR}|32}
  {do_pop}
  {calcRA|{addrR}|Write|32}
  mov [esi], ebx
  {commit_write|{addrR}|Write}
  {advanceIP_1op|{addrR}|32}
{general_epilog}

push opcode
{push_instruction|Imm|{opcode}}
{push_instruction|Reg|{opcode}}
{push_instruction|RegInd|{opcode}}
{push_instruction|RegIndDispl|{opcode}}
{push_instruction|Direct|{opcode}}
{push_instruction|Indirect|{opcode}}
{push_instruction|IndirectDispl|{opcode}}
{push_instruction|ShortImm|{opcode}}
{push_instruction|IndirectShortDispl|{opcode}}

pop opcode
{pop_instruction|Reg|{opcode}}
{pop_instruction|RegInd|{opcode}}
{pop_instruction|RegIndDispl|{opcode}}
{pop_instruction|Direct|{opcode}}
{pop_instruction|Indirect|{opcode}}
{pop_instruction|IndirectDispl|{opcode}}
{pop_instruction|IndirectShortDispl|{opcode}}

; --- Other -------------------------------------------------------------------

get_sys_reg
{general_prolog|get_sys_reg}
  movzx eax, byte ptr [ebx + 1]
  mov edx, [eax + RegistersFile]
  movzx eax, byte ptr [ebx + 2]
  mov eax, [eax + SysRegisters]
  mov [esi], eax
{general_epilog}

set_sys_reg
{general_prolog|set_sys_reg}
  movzx eax, byte ptr [ebx + 2]
  mov eax, [eax + SysRegisters]
  mov edx, [eax]
  movzx eax, byte ptr [ebx + 1]
  mov [eax + RegistersFile], edx
{general_epilog}

; --- Opcodes -----------------------------------------------------------------

opc_addrR n/a
  0

opc_addrR 'Imm
  $0

opc_addrR 'Reg
  $1

opc_addrR 'RegInd
  $2

opc_addrR 'RegIndDispl
  $3

opc_addrR 'Direct
  $4

opc_addrR 'Indirect
  $5

opc_addrR 'IndirectDispl
  $6

opc_addrR 'Rel
  $7

opc_addrR 'ShortImm
  $8

opc_addrR 'IndirectShortDispl
  $E

opc_addrL n/a
  0

opc_addrL 'Reg
  $00

opc_addrL 'RegInd
  $10

opc_size n/a
  0

opc_size '32
  $00

opc_size '16
  $40

opc_size '8
  $80

opc_dir n/a
  0

opc_dir 'left
  $00

opc_dir 'right
  $20

build_opcode opcode addrR addrL direction size
  {opcode} shl 8 or {opc_addrR|{addrR}} or {opc_addrL|{addrL}} or {opc_size|{size}} or {opc_dir|{direction}}

itable_put_single name opcode
  InstructionTable[{opcode}] := @{name};

itable_put_bulk name opcode
  for i := 0 to $FF do
    InstructionTable[{opcode} shl 8 + i] := @{name};

arith_instruction_2op operation addrR addrL direction size opcode
  {itable_put_single|{operation}_{addrL}_{addrR}_{direction}_{size}|{build_opcode|{opcode}|{addrR}|{addrL}|{direction}|{size}}}

arith_instruction_1op operation addrR size opcode
  {itable_put_single|{operation}_{addrR}_{size}|{build_opcode|{opcode}|{addrR}|||{size}}}

branch_instruction_rel operation flag neg opcode

branch_instruction_abs operation addrR flag neg opcode
  {itable_put_single|{operation}_{addrR}|{build_opcode|{opcode}|{addrR}|||}}

branch_rel operation opcode
  {itable_put_bulk|{operation}_Rel|{opcode}}

push_instruction addrR opcode
  {itable_put_single|push_{addrR}|{build_opcode|{opcode}|{addrR}|||}}

pop_instruction addrR opcode
  {itable_put_single|pop_{addrR}|{build_opcode|{opcode}|{addrR}|||}}

; --- Target ------------------------------------------------------------------

target
unit Instructions;
interface
procedure InitInstructionTable;
implementation
uses Core, Memory, Registers, Bus;
const
  SourceOpDispl = 3;
  DestOpDispl = 2;
  SingleOpDispl = 2;
{arith|add|2op|def}
{arith|adc|2op|def}
{arith|sub|2op|def}
{arith|sbb|2op|def}
{arith|cmp|2op|def}
{arith|cpc|2op|def}
{arith|and|2op|def}
{arith|or|2op|def}
{arith|xor|2op|def}
{arith|not|1op|def}
{arith|neg|1op|def}
{arith|inc|1op|def}
{arith|dec|1op|def}
{arith|test|2op|def}
{arith|clr|1op|def}
{arith|mov|2op|def}
{arith|in|2op|def}
{arith|out|2op|def}
{branch_rel|jmp|def}
{branch_abs|jmp|def}
{branch_rel|call|def}
{branch_abs|call|def}
{ret_instruction}
{branch_cond|jz|_ZF||def}
{branch_cond|jnz|_ZF|n|def}
{branch_cond|jc|_CF||def}
{branch_cond|jnc|_CF|n|def}
{branch_cond|jn|_NF||def}
{branch_cond|jp|_NF|n|def}
{branch_cond|jge||-|def}
{branch_cond|jl||-|def}
{nop_instruction}
{get_sys_reg}
{set_sys_reg}
{push|def}
{pop|def}
procedure InitInstructionTable;
var i : Integer;
begin
  {arith|add|2op|$01}
  {arith|adc|2op|$02}
  {arith|sub|2op|$03}
  {arith|sbb|2op|$04}
  {arith|cmp|2op|$05}
  {arith|cpc|2op|$06}
  {arith|and|2op|$07}
  {arith|or|2op|$08}
  {arith|xor|2op|$09}
  {arith|not|1op|$0A}
  {arith|neg|1op|$0B}
  {arith|inc|1op|$0C}
  {arith|dec|1op|$0D}
  {arith|test|2op|$0E}
  {arith|clr|1op|$0F}
  {arith|mov|2op|$A0}
  {arith|in|2op|$A3}
  {arith|out|2op|$A4}
  {branch_rel|jmp|$80}
  {branch_abs|jmp|$81}
  {branch_rel|call|$82}
  {branch_abs|call|$83}
  {branch_rel|jz|$88}
  {branch_rel|jnz|$89}
  {branch_rel|jc|$8A}
  {branch_rel|jnc|$8B}
  {branch_rel|jn|$8C}
  {branch_rel|jp|$8D}
  {branch_rel|jge|$8E}
  {branch_rel|jl|$8F}
  {itable_put_bulk|ret|$84}
  {itable_put_bulk|nop|$90}
  {itable_put_bulk|get_sys_reg|$A1}
  {itable_put_bulk|set_sys_reg|$A2}
  {push|$A5}
  {pop|$A6}
end;
end.

